{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Aligni Python Source Code : https://github.com/mnorman-dev/aligni-python PyPI : https://pypi.org/project/aligni-python/ Python library for interfacing to the Aligni (PLM/MRP) API v2 Full documentation of the underlying API is available at: https://api.aligni.com/v2/index.html WARNING This code should be considered beta level at best. A good understanding of the underlying api is required to understand the data available for each datatype. Usage Below is a simple example of how to use this interface to query the parts in a library. This example uses the demo Aligni site at https://demo.aligni.com/ . import aligni.api if __name__ == \"__main__\": sitename = \"demo\" # Replace with sitename of Aligni account apikey = \"oid3vLgynoy_Yl1gZkrgkLEq3J\" # Replace with API Key created from Aligni account aligni_api = aligni.api.API(sitename, apikey) aligni_parts = aligni_api.parts.get_list() aligni_total_part_count = len(aligni_parts) print(\"Aligni Part Count =\", aligni_total_part_count) Refer to tests to see further examples. Installation pip install aligni-python Development Clone this repository Requirements: Poetry Python 3.7+ Create a virtual environment and install the dependencies poetry install Activate the virtual environment poetry shell Testing pytest Pre-commit Pre-commit hooks run all the auto-formatters (e.g. black , isort ), linters (e.g. mypy , flake8 ), and other quality checks to make sure the changeset is in good shape before a commit/push happens. You can install the hooks with (runs for each commit): pre-commit install Or if you want them to run only for each push: pre-commit install -t pre-push Or if you want e.g. want to run all checks manually for all files: pre-commit run --all-files","title":"Introduction"},{"location":"#aligni-python","text":"Source Code : https://github.com/mnorman-dev/aligni-python PyPI : https://pypi.org/project/aligni-python/ Python library for interfacing to the Aligni (PLM/MRP) API v2 Full documentation of the underlying API is available at: https://api.aligni.com/v2/index.html WARNING This code should be considered beta level at best. A good understanding of the underlying api is required to understand the data available for each datatype.","title":"Aligni Python"},{"location":"#usage","text":"Below is a simple example of how to use this interface to query the parts in a library. This example uses the demo Aligni site at https://demo.aligni.com/ . import aligni.api if __name__ == \"__main__\": sitename = \"demo\" # Replace with sitename of Aligni account apikey = \"oid3vLgynoy_Yl1gZkrgkLEq3J\" # Replace with API Key created from Aligni account aligni_api = aligni.api.API(sitename, apikey) aligni_parts = aligni_api.parts.get_list() aligni_total_part_count = len(aligni_parts) print(\"Aligni Part Count =\", aligni_total_part_count) Refer to tests to see further examples.","title":"Usage"},{"location":"#installation","text":"pip install aligni-python","title":"Installation"},{"location":"#development","text":"Clone this repository Requirements: Poetry Python 3.7+ Create a virtual environment and install the dependencies poetry install Activate the virtual environment poetry shell","title":"Development"},{"location":"#testing","text":"pytest","title":"Testing"},{"location":"#pre-commit","text":"Pre-commit hooks run all the auto-formatters (e.g. black , isort ), linters (e.g. mypy , flake8 ), and other quality checks to make sure the changeset is in good shape before a commit/push happens. You can install the hooks with (runs for each commit): pre-commit install Or if you want them to run only for each push: pre-commit install -t pre-push Or if you want e.g. want to run all checks manually for all files: pre-commit run --all-files","title":"Pre-commit"},{"location":"api_docs/","text":"API documentation","title":"API documentation"},{"location":"api_docs/#api-documentation","text":"","title":"API documentation"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased 0.0.1 - 2022-08-14 Initial release","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#001-2022-08-14","text":"Initial release","title":"0.0.1 - 2022-08-14"}]}